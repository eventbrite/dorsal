{"name":"Dorsal","tagline":"A client-side JavaScript boilerplate automation system.","body":"Dorsal\r\n======\r\n[![Build Status](https://travis-ci.org/eventbrite/dorsal.svg)](https://travis-ci.org/eventbrite/dorsal) [![NPM version](https://badge.fury.io/js/dorsal.svg)](http://badge.fury.io/js/dorsal) [![Code Climate](https://codeclimate.com/github/eventbrite/dorsal.png)](https://codeclimate.com/github/eventbrite/dorsal)\r\nWhat is it?\r\n-----------\r\n\r\nTL;DR, an HTML decorator library\r\n\r\nWant to use JavaScript without writing it? Want your team to be able to use your BackboneJS or JavaScript components without manually initializing them? Well you and your team should use Dorsal!\r\n\r\nDorsal swims around your DOM in search of HTML that's hungry for delicious, delicious JavaScript. Dorsal scoops up those DOM elements and wires them up just by applying one class to your HTML. We were inspired by the directives system in Angular and wanted to bring something similar to our frontend stack here at Eventbrite.\r\n\r\nDorsal is platform agnostic, has no dependencies, and has been tested to work with IE8+, Firefox, Safari, and Chrome.\r\n\r\n## Setup\r\n\r\nDorsal is agnostic to AMD, CommonJS and namespaces.\r\n\r\n- CommonJS/Node: `require('dorsal')`\r\n- AMD: `require('node_modules/dorsal/dist/dorsal')`\r\n- Namespaces: `window.Dorsal` after adding src/dorsal.js as a script\r\n\r\nInstallation is easiest using npm: `npm install dorsal --save`\r\n\r\nAPI\r\n---\r\n\r\n## Register a plugin\r\n\r\nThe following is an example of a plugin and its usage. We define a Dorsal plugin named `hello-world`. Once `wire` is called Dorsal will query for `.js-d-hello-world` in the DOM and all occurances will be initialized.\r\n\r\n    <div class='js-d-hello-world'></div>\r\n\r\n    <script>\r\n        Dorsal.registerPlugin('hello-world', function(options) {\r\n            console.log(this === options.el); // true\r\n\r\n            options.el.innerHTML = 'Hello World';\r\n        });\r\n\r\n        Dorsal.wire()\r\n    </script>\r\n\r\n## Wiring\r\n\r\nYou don't need to wire your whole page. `Dorsal.wire()` accepts an element as an optional argument. If no element is provided it will use `document` as the parent and find all occurances within it.\r\n\r\n    <div class='js-d-other-plugin'></div>\r\n\r\n    <div class='some-arbitrary-parent-selector'>\r\n        <div class='js-d-hello-world'></div>\r\n        <div class='js-d-hello-world'></div>\r\n        <div class='js-d-hello-world'></div>\r\n    </div>\r\n\r\n    <script>\r\n        // if using jquery\r\n        Dorsal.wire($('.js-d-other-plugin').get(0));\r\n        Dorsal.wire($('.some-arbitrary-parent-selector').get(0));\r\n    </script>\r\n\r\n## Unwiring/Rewiring\r\n\r\nSometimes you'll want to rewire something if it changes dynamically and your plugin can't account for that. In that case, you should use rewire.\r\n\r\n    <div class='js-lorem-1 js-d-lorem' data-xd-wired=\"lorem\">Lorem yay</div>\r\n\r\n    <div class='js-lorem-2 js-d-lorem' data-xd-wired=\"lorem\">Lorem yay</div>\r\n\r\n    <script>\r\n        // disable the first lorem\r\n        Dorsal.unwire($('.js-lorem-1').get(0), 'lorem');\r\n\r\n        // change the type of the second lorem to bacon\r\n        $('.js-lorem-2').data('d-type', 'bacon');\r\n        // replaces lorem ipsum with bacon ipsum\r\n        Dorsal.rewire($('.js-lorem-2').get(0), 'lorem');\r\n    </script>\r\n\r\n## Arguments and Data Attributes\r\n\r\nSometimes you will want to pass options to your selectors. In such cases you can use data attributes.\r\n\r\n    <div\r\n        class='js-d-hello-world'\r\n        data-d-non-standard-hello-variant='bacon'\r\n        data-d-prefix='Ohhhh, '\r\n    ></div>\r\n\r\n    <script>\r\n        Dorsal.registerPlugin('hello-world', function(options) {\r\n            console.log(options.data.nonStandardHelloVariant); // bacon\r\n\r\n            var helloMap = [\r\n                    bacon: 'Bacon world',\r\n                    default: 'Hello world'\r\n                ],\r\n                variant = options.nonStandardHelloVariant || 'default',\r\n                prefix = options.data.prefix || '';\r\n\r\n            options.el.innerHTML = prefix + helloMap[variant];\r\n        });\r\n\r\n        Dorsal.wire()\r\n    </script>\r\n\r\nExamples\r\n--------\r\n\r\nSee it in action by opening `examples/lorem.html`. This use case automatically inserts Lorem ipsum wherever a `.js-d-lorem` class is used.\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2014 Eventbrite\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\nSee LICENSE.md.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}